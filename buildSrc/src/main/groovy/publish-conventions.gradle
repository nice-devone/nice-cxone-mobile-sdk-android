plugins {
    id "com.vanniktech.maven.publish.base" // Using base which allows to setup multivariant publishing
}

publishing {
    repositories {
        maven {
            name = "github"
            url "https://maven.pkg.github.com/nice-devone/nice-cxone-mobile-sdk-android"
            credentials {
                username = project.findProperty("github.user") ?: System.getenv("GPR_USERNAME")
                password = project.findProperty("github.key") ?: System.getenv("GPR_TOKEN")
            }
        }
    }
}

static String getGitCurrentBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    return branch
}

/*
 * Copyright (c) 2021-2024. NICE Ltd. All rights reserved.
 *
 * Licensed under the NICE License;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://github.com/nice-devone/nice-cxone-mobile-sdk-android/blob/main/LICENSE
 *
 * TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE CXONE MOBILE SDK IS PROVIDED ON
 * AN “AS IS” BASIS. NICE HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS
 * OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE.
 */

/**
 * Combines base version with branch.
 * If the branch starts with "sdk/" then prefix "sdk/" is removed otherwise the default branch name "main" is used.
 * Then branch name is escaped by replacing chars '/', '_'  with '-'.
 * Final string is created by combining `${versionBase}
 * @param versionBase base which will be used for combining with branch.
 * @return
 */
static String branchVersion(String versionBase) {
    if (versionBase == null) {
        return null
    }
    final def featureBranch = "feature/"
    final def defaultBranch = "main"
    String branch = getGitCurrentBranch()
    if (!branch.startsWith(featureBranch)) {
        branch = defaultBranch
    }
    return versionBase + "-" + branch.replaceAll("[/_]", "-") + "-SNAPSHOT"
}

/**
 * This task will set project version to use version + branch name
 */
tasks.register("publishToMavenLocalAsBranchVersion") {
    doFirst {
        project.version = branchVersion(project.findProperty("VERSION_NAME") ?: project.version)
        println("Publishing local version:" + project.version)
    }

    configure {
        group = "Publishing"
        description = "Publishes artifact to MavenLocal using current version + branch as artifact name"
    }
}

/**
 * Final part of setup for publishToMavenLocalAsBranchVersion - orders tasks
 * First setup is performed and then publishing itself.
 */
tasks.getByName("publishToMavenLocalAsBranchVersion") finalizedBy tasks.getByName("publishToMavenLocal")
