/*
 * Copyright (c) 2021-2024. NICE Ltd. All rights reserved.
 *
 * Licensed under the NICE License;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://github.com/nice-devone/nice-cxone-mobile-sdk-android/blob/main/LICENSE
 *
 * TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE CXONE MOBILE SDK IS PROVIDED ON
 * AN “AS IS” BASIS. NICE HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS
 * OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE.
 */

import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektPlugin
import io.gitlab.arturbosch.detekt.report.ReportMergeTask

plugins {
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.jvm) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.dokka) apply true
    alias(libs.plugins.maven.publish) apply false
    alias(libs.plugins.google.services) apply false
    alias(libs.plugins.androidx.safeargs) apply false
    alias(libs.plugins.detekt)
    alias(libs.plugins.rootcoverage) apply true
    alias(libs.plugins.semantic.version) apply false
    alias(libs.plugins.firebase.appdistribution) apply false
    alias(libs.plugins.firebase.crashlytics) apply false
    alias(libs.plugins.ksp) apply false
    alias(libs.plugins.metalava) apply false
    alias(libs.plugins.compose.compiler) apply false
    alias(libs.plugins.kotlin.serialization) apply false
}

group = GROUP
version = "2.2.0" // Fallback version

allprojects {
    group = rootProject.group
    // Setup project version to override from gradle.properties or fallback version
    version = (rootProject.properties["VERSION_NAME"] ?: rootProject.version)
}

if (!rootProject.hasProperty("VERSION_NAME")) { // Disable this plugin if override is present, otherwise it will suppress it
    apply plugin: "com.dipien.semantic-version" // Plugin can be applied after version is defined
}

tasks.dokkaHtmlMultiModule.configure {
    outputDirectory.set(project.file("dist"))
}

tasks.register('metalavaGenerateSignature') {
    dependsOn subprojects.collect { it.tasks.matching { it.name == "metalavaGenerateSignatureRelease" } }
}

tasks.register('metalavaCheckCompatibility') {
    dependsOn subprojects.collect { it.tasks.matching { it.name == "metalavaCheckCompatibilityRelease" } }
}

// This task mirrors the tests that will eventually be performed in various github actions
// and can be used as a final check before submitting a PR.
tasks.register('precheck') {
    // Syntax Checks
    dependsOn(':chat-sdk-core:check')
    dependsOn(':chat-sdk-ui:check')
    dependsOn(':store:check')
    dependsOn(':store:lintVitalRelease')
    // Build Check
    dependsOn(':store:assembleRelease')
    // API compatibility check
    dependsOn(':metalavaCheckCompatibility')
}

rootCoverage {
    generateXml true
    generateHtml false
    excludes = [
            "**/internal/model/**",
            "com/nice/cxonechat/sample/**",
            "com/nice/cxonechat/ui/**"
    ]
}

/**
 * Combines base version with branch and replaces all `/` with `-` from the final string.
 *
 * @param versionBase base which will be used for combining with branch.
 * @return version string based on base version and branch
 */
static String branchVersion(String versionBase, Project project) {
    if (versionBase == null) {
        return null
    }
    String branch = getGitCurrentBranch(project)
    return versionBase + "-" + branch.replaceAll("[/_]", "-")
}

static String getGitCurrentBranch(Project project) {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line ->
        project.logger.lifecycle("Current git branch: $line")
        branch = line
    }
    proc.err.eachLine { line -> project.logger.error("Unable to resolve git branch: $line") }
    proc.waitFor()
    return branch
}

tasks.register('clean', Delete) {
    delete rootProject.layout.buildDirectory
}

tasks.register('reportMerge', ReportMergeTask) {
    output = rootProject.layout.buildDirectory.file("reports/detekt/merge.sarif")
}

subprojects {
    afterEvaluate {
        plugins.withType(DetektPlugin).configureEach {
            tasks.withType(Detekt).configureEach { detektTask ->
                finalizedBy(reportMerge)

                reportMerge.configure { mergeTask ->
                    mergeTask.input.from(detektTask.sarifReportFile)
                }
            }
        }
    }
}
