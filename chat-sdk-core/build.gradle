/*
 * Copyright (c) 2021-2024. NICE Ltd. All rights reserved.
 *
 * Licensed under the NICE License;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    https://github.com/nice-devone/nice-cxone-mobile-sdk-android/blob/main/LICENSE
 *
 * TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE CXONE MOBILE SDK IS PROVIDED ON
 * AN “AS IS” BASIS. NICE HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS
 * OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE.
 */

import com.vanniktech.maven.publish.AndroidMultiVariantLibrary

plugins {
    id "android-library-conventions"
    id "android-kotlin-conventions"
    id "android-docs-conventions"
    id "android-test-conventions"
    id "android-library-style-conventions"
    id "publish-conventions"
    id "api-conventions"
    id "org.jetbrains.kotlin.plugin.serialization"
}
metalava {
    hiddenPackages = ["com.nice.cxonechat.internal"]
}
android {
    namespace 'com.nice.cxonechat.core'

    defaultConfig {
        consumerProguardFiles "consumer-rules.pro"
        versionName version
        buildConfigField 'String', 'VERSION_NAME', "\"$version\""
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        test {
            resources {
                srcDirs "src/test/assets"
            }
        }
    }

    buildFeatures {
        buildConfig true // Library version is used for device fingerprint
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs = ['-Xjvm-default=all']
    }
}

// Setup publishing of all library variants.
// Dependant will get matching variant automatically (eg.: buildType:debug will get buildType:debug)
// Alternatively they can provide transformation mapping.
mavenPublishing {
    configure(new AndroidMultiVariantLibrary(true, true))
}

dependencies {
    implementation libs.androidx.ktx
    implementation libs.security.crypto
    implementation libs.kotlinx.serialization.json
    implementation libs.retrofit
    implementation libs.retrofit.kotlinx.serialization
    implementation libs.okhttp
    implementation project(':utilities')
    api project(':logger')
    implementation project(':logger-android')
    testImplementation libs.kotest.assertions.core
    testImplementation libs.kotlin.reflect
    testImplementation libs.gson
}
